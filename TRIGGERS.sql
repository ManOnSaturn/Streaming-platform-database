--It forbids inconsistecies between the career start date and the release date of a content for an artist who participates in it
CREATE OR REPLACE TRIGGER CHECK_PARTICIPATION_DATE
BEFORE INSERT ON PARTICIPATES
FOR EACH ROW
DECLARE 
	START_DATE ARTIST.CAREER_START_DATE%TYPE;
	WRONG_DATE EXCEPTION;
BEGIN
	SELECT CAREER_START_DATE INTO START_DATE FROM ARTIST WHERE ARTIST_ID = :NEW.ARTIST_ID;
	IF START_DATE > :NEW.RELEASE_DATE THEN
		RAISE WRONG_DATE;
	END IF;
EXCEPTION 
	WHEN WRONG_DATE THEN
		RAISE_APPLICATION_ERROR(-20009,'WRONG DATE');
END;
/
--It forbids the number of season in the table "SEASON" to exceed SEASON_NUM in the "SERIES" table
CREATE OR REPLACE TRIGGER CHECK_SEASONS_N
BEFORE INSERT ON SEASON
FOR EACH ROW
DECLARE
	COUNTER NUMBER;
	SEASONS_N NUMBER;
	TOO_MANY_SEASONS EXCEPTION;
BEGIN
	SELECT COUNT(*) INTO COUNTER FROM SEASON WHERE TITLE = :NEW.TITLE AND RELEASE_DATE = :NEW.RELEASE_DATE;
	SELECT SEASON_NUM INTO SEASONS_N FROM SERIES WHERE TITLE = :NEW.TITLE AND RELEASE_DATE = :NEW.RELEASE_DATE;
	IF COUNTER = SEASONS_N THEN
		RAISE TOO_MANY_SEASONS;
	END IF;
EXCEPTION
	WHEN TOO_MANY_SEASONS THEN
		RAISE_APPLICATION_ERROR(-20010,'TOO MANY SEASONS');
END;
/
--It forbids the number of episodes in the "EPISODE" table to exceed EPISODES_NUM in the "SEASON" table
CREATE OR REPLACE TRIGGER CHECK_EPISODES_N
BEFORE INSERT ON EPISODE
FOR EACH ROW
DECLARE
	COUNTER NUMBER;
	EPISODES_N NUMBER;
	TOO_MANY_EPISODES EXCEPTION;
BEGIN
	SELECT COUNT(*) INTO COUNTER FROM EPISODE WHERE TITLE = :NEW.TITLE AND RELEASE_DATE = :NEW.RELEASE_DATE AND SEASON_NUM = :NEW.SEASON_NUM;
	SELECT EPISODES_NUM INTO EPISODES_N FROM SEASON WHERE TITLE = :NEW.TITLE AND RELEASE_DATE = :NEW.RELEASE_DATE AND SEASON_NUM = :NEW.SEASON_NUM;
	IF COUNTER = EPISODES_N THEN
		RAISE TOO_MANY_EPISODES;
	END IF;
EXCEPTION
	WHEN TOO_MANY_EPISODES THEN
		RAISE_APPLICATION_ERROR(-20011,'TOO MANY EPISODES');
END;
/
--It forbids an user to make more than a subscription per day;
--Forbids to own a "BASIC" membership whenever there are more than 2 playlists in a profile;
--Forbids to own a "BASIC" membership whenever there are more than 5 connected devices;
--Forbids to subscribe to a membership if the recorded card has expired.
CREATE OR REPLACE TRIGGER CHECK_SUBSCRIPTION_DATE_PLAYLISTS_NUMBER_DEVICES_NUMBER
BEFORE INSERT ON SUBSCRIPTION
FOR EACH ROW 
DECLARE
	--Check date
	SUBSCRIPTION_DATE NUMBER;
	OLD_DATA NUMBER;
	D DATE;
	SUBSCRIPTION_DAY_ERROR EXCEPTION;
	--Check playlists
	PROFILES_N NUMBER;
	LIMIT_EXCEDED EXCEPTION;
	--Check devices
	DEVICES_N NUMBER;
	TOO_MANY_DEVICES EXCEPTION;
	--Check credit card expiration date
	CARD_EXPIRATION_DATE DATE;
	EXPIRED EXCEPTION;
BEGIN
	--Check date
	SELECT EXTRACT(DAY FROM :NEW.SUBSCRIPTION_DATE) INTO SUBSCRIPTION_DATE FROM DUAL;
	SELECT MAX(SUBSCRIPTION_DATE) INTO D FROM SUBSCRIPTION WHERE EMAIL = :NEW.EMAIL;
	SELECT EXTRACT(DAY FROM  D) INTO OLD_DATA FROM DUAL;
	IF OLD_DATA = SUBSCRIPTION_DATE THEN
		RAISE SUBSCRIPTION_DAY_ERROR;
	END IF;
	IF :NEW.MEMBERSHIP_NAME='BASIC' THEN
		--Check playlists
		SELECT COUNT(*) INTO PROFILES_N  FROM PLAYLIST 
		WHERE NICKNAME IN (
		SELECT NICKNAME FROM PROFILE
		WHERE EMAIL = :NEW.EMAIL)
		GROUP BY NICKNAME
		HAVING NICKNAME > 2;
		IF PROFILES_N>0 THEN
			RAISE LIMIT_EXCEDED;
		END IF;
		--Check devices
		SELECT COUNT(*) INTO DEVICES_N FROM CONNECTED_DEVICES WHERE  EMAIL = :NEW.EMAIL;
		IF DEVICES_N > 5 THEN
			RAISE TOO_MANY_DEVICES;		
		END IF;
	END IF;
	--Check credit card expiration date
	SELECT EXPIRATION_DATE INTO CARD_EXPIRATION_DATE FROM CREDIT_CARD WHERE METHOD_ID = :NEW.METHOD_ID;
	IF CARD_EXPIRATION_DATE < SYSDATE THEN
		RAISE EXPIRED;
	END IF;	
EXCEPTION
	--Check date
	WHEN SUBSCRIPTION_DAY_ERROR THEN
		RAISE_APPLICATION_ERROR(-20012,'SUBSCRIPTION ALREADY MADE TODAY');
	--Check playlists
	WHEN LIMIT_EXCEDED THEN
		RAISE_APPLICATION_ERROR(-20013,'PLAYLISTS LIMIT REACHED FOR A PROFILE,DELETE SOME PLAYLIST AND RETRY');
	WHEN NO_DATA_FOUND THEN --in this case, NO_DATA_FOUND must be ignored, since the trigger may block the insert even if there are no playlists
		NULL;
	--Check devices
	WHEN TOO_MANY_DEVICES THEN
		RAISE_APPLICATION_ERROR(-20014,'CONNECTED DEVICES LIMIT REACHED');
	--Check credit card expiration date
	WHEN EXPIRED THEN
		RAISE_APPLICATION_ERROR(-20020,'INSERTED CREDIT CARD IS EXPIRED');
END;
/
--There is a second trigger before insert on subscription to make more efficient the NO_DATA_FOUND management.
--It forbids an user to use a payment method not owned by him.
CREATE OR REPLACE TRIGGER CHECK_EMAIL_CONGRUENCE
BEFORE INSERT ON SUBSCRIPTION
FOR EACH ROW
DECLARE
	COUNTER NUMBER;
BEGIN
	SELECT COUNT(*) INTO COUNTER FROM PAYMENT_METHOD WHERE EMAIL=:NEW.EMAIL AND METHOD_ID=:NEW.METHOD_ID;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20015,'THE PAYMENT METHOD IN INPUT DOES NOT CORRESPOND TO THE USER TRYING TO MAKE THE SUBSCRIPTION');
END;
/
--It establishes that if a profile it's owned by an user with a "BASIC" membership, it's limited to have maximum 2 playlists;
--It also forbids a profile to create a playlist if he hasn't an active membership.
CREATE OR REPLACE TRIGGER CHECK_PALYLISTS
BEFORE INSERT ON PLAYLIST
FOR EACH ROW
DECLARE
	SUBSCRIPTION_DATE_ DATE;
	EMAIL_ VARCHAR(50);
	MEMBERSHIP_NAME_ VARCHAR(30);
	PLAYLISTS_NUMBER_ NUMBER;
	MONTHS_DURATION_ NUMBER;
	MEMBERSHIP_EXPIRATION_DATE DATE;
	PLAYLISTS_LIMIT_REACHED EXCEPTION;
	MEMBERSHIP_EXPIRED EXCEPTION;
BEGIN
	--Extract the most recent subscription date and the user's email of the user of interest
	SELECT MAX(SUBSCRIPTION_DATE), MAX(EMAIL) INTO SUBSCRIPTION_DATE_,EMAIL_ FROM SUBSCRIPTION
	WHERE EMAIL=(
	SELECT EMAIL 
	FROM SERVICE_USER NATURAL JOIN PROFILE WHERE NICKNAME=:NEW.NICKNAME);
	--Extract the membership name
	SELECT MEMBERSHIP_NAME INTO MEMBERSHIP_NAME_ 
	FROM SUBSCRIPTION
	WHERE SUBSCRIPTION_DATE=SUBSCRIPTION_DATE_ AND EMAIL=EMAIL_;
	IF MEMBERSHIP_NAME_ = 'BASIC' THEN
		SELECT COUNT(*) INTO PLAYLISTS_NUMBER_ FROM PLAYLIST
		WHERE NICKNAME=:NEW.NICKNAME;
		IF PLAYLISTS_NUMBER_ = 2 THEN
			RAISE PLAYLISTS_LIMIT_REACHED;
		END IF;
	END IF;
	--Use the previously extracted membership_name to know how long the subscription will last
	SELECT MONTHS_DURATION INTO MONTHS_DURATION_ FROM MEMBERSHIP
	WHERE MEMBERSHIP_NAME = MEMBERSHIP_NAME_;
	SELECT ADD_MONTHS(SUBSCRIPTION_DATE_,MONTHS_DURATION_) INTO MEMBERSHIP_EXPIRATION_DATE FROM DUAL;
	IF MEMBERSHIP_EXPIRATION_DATE < SYSDATE THEN
		RAISE MEMBERSHIP_EXPIRED;
	END IF;
EXCEPTION
	WHEN PLAYLISTS_LIMIT_REACHED THEN
		RAISE_APPLICATION_ERROR(-20016,'PLAYLISTS LIMIT REACHED');
	WHEN MEMBERSHIP_EXPIRED THEN
		RAISE_APPLICATION_ERROR(-20100,'MEMBERSHIP EXPIRED, IMPOSSIBLE TO CREATE A NEW PLAYLIST');
END;
/
--It allows to use maximum 5 devices for each user, if the user has a "BASIC" membership.
CREATE OR REPLACE TRIGGER CHECK_DEVICES_N
BEFORE INSERT ON CONNECTED_DEVICES
FOR EACH ROW
DECLARE
	DEVICES_N NUMBER;
	MEMBERSHIP_TYPE VARCHAR(30);
	TOO_MANY_DEVICES EXCEPTION;
BEGIN
	SELECT COUNT(*) INTO DEVICES_N FROM CONNECTED_DEVICES WHERE  EMAIL = :NEW.EMAIL;
	SELECT MEMBERSHIP_NAME INTO MEMBERSHIP_TYPE FROM SUBSCRIPTION WHERE EMAIL = :NEW.EMAIL;
	IF MEMBERSHIP_TYPE = 'BASIC' THEN
		IF DEVICES_N > 4 THEN
			RAISE TOO_MANY_DEVICES;
		END IF;
	END IF;	
EXCEPTION 
	WHEN TOO_MANY_DEVICES THEN
		RAISE_APPLICATION_ERROR(-20017,'DEVICES LIMIT REACHED');
END;
/
--It checks that an user is not trying to insert more than 3 profiles
CREATE OR REPLACE TRIGGER CHECK_PROFILES_N
BEFORE INSERT ON PROFILE
FOR EACH ROW
DECLARE
	COUNTER NUMBER;
	TOO_MANY_PROFILES EXCEPTION;
BEGIN
	SELECT COUNT(*) INTO COUNTER FROM PROFILE WHERE EMAIL = :NEW.EMAIL;
	IF COUNTER > 2 THEN
		RAISE TOO_MANY_PROFILES;
	END IF;
EXCEPTION
	WHEN TOO_MANY_PROFILES THEN
		RAISE_APPLICATION_ERROR(-20002,'PROFILES LIMIT REACHED');
END;
/
--It forbids that an user with an expired subscription could add a review.
CREATE OR REPLACE TRIGGER CHECK_REVIEW
BEFORE INSERT ON REVIEW
FOR EACH ROW
DECLARE
	SUBSCRIPTION_DATE_ DATE;
	EMAIL_ VARCHAR(50);
	MEMBERSHIP_NAME_ VARCHAR(30);
	MONTHS_DURATION_ NUMBER;
	MEMBERSHIP_EXPIRATION_DATE DATE;
	MEMBERSHIP_EXPIRED EXCEPTION;
BEGIN
	--Extract the most recent subscription name and the email of the user of interest
	SELECT MAX(SUBSCRIPTION_DATE), MAX(EMAIL) INTO SUBSCRIPTION_DATE_,EMAIL_ FROM SUBSCRIPTION
	WHERE EMAIL=(
	SELECT EMAIL 
	FROM SERVICE_USER NATURAL JOIN PROFILE WHERE NICKNAME=:NEW.NICKNAME);
	--Extract the membership name
	SELECT MEMBERSHIP_NAME INTO MEMBERSHIP_NAME_ 
	FROM SUBSCRIPTION
	WHERE SUBSCRIPTION_DATE=SUBSCRIPTION_DATE_ AND EMAIL=EMAIL_;
	--Use the previously extracted membership_name to know how long the subscription will last
	SELECT MONTHS_DURATION INTO MONTHS_DURATION_ FROM MEMBERSHIP
	WHERE MEMBERSHIP_NAME = MEMBERSHIP_NAME_;
	SELECT ADD_MONTHS(SUBSCRIPTION_DATE_,MONTHS_DURATION_) INTO MEMBERSHIP_EXPIRATION_DATE FROM DUAL;
	IF MEMBERSHIP_EXPIRATION_DATE < SYSDATE THEN
		RAISE MEMBERSHIP_EXPIRED;
	END IF;
EXCEPTION
	WHEN MEMBERSHIP_EXPIRED THEN
		RAISE_APPLICATION_ERROR(-20200,'MEMBERSHIP EXPIRED, IMPOSSIBLE TO ADD A NEW REVIEW');
END;
/