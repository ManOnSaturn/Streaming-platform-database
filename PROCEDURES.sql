--It Allows to subscribe to the platform using an user account, insert a payment method and subscribe a membership.
CREATE OR REPLACE PROCEDURE SIGNIN(EMAIL_ VARCHAR,NICKNAME_ VARCHAR, PARENTAL_CONTROL_ CHAR, MEMBERSHIP_NAME_ VARCHAR,CARD_NUMBER_ CHAR,EXPIRATION_DATE_ DATE,HOLDER_NAME_ VARCHAR,HOLDER_SURNAME_ VARCHAR,PAYPAL_EMAIL_ VARCHAR) 
IS
	NEW_METHOD_ID NUMBER;
	PAID_AMOUNT NUMBER;
	EXPIRED EXCEPTION;
BEGIN
	SELECT seq_method_id.NEXTVAL INTO NEW_METHOD_ID FROM DUAL;
	INSERT INTO SERVICE_USER (EMAIL) VALUES
	(EMAIL_);
	INSERT INTO PAYMENT_METHOD(METHOD_ID,EMAIL) VALUES
	(NEW_METHOD_ID,EMAIL_);
	IF PAYPAL_EMAIL_ IS NULL THEN
		INSERT INTO CREDIT_CARD(CARD_NUMBER, EXPIRATION_DATE, HOLDER_NAME, HOLDER_SURNAME,  METHOD_ID) VALUES 
		(CARD_NUMBER_, EXPIRATION_DATE_, HOLDER_NAME_, HOLDER_SURNAME_, NEW_METHOD_ID);
	ELSE
		INSERT INTO PAYPAL(EMAIL_PAYPAL, METHOD_ID) VALUES
		(PAYPAL_EMAIL_, NEW_METHOD_ID);
	END IF;
	SELECT PRICE INTO PAID_AMOUNT FROM MEMBERSHIP WHERE MEMBERSHIP_NAME = MEMBERSHIP_NAME_;
	INSERT INTO SUBSCRIPTION(SUBSCRIPTION_DATE, EMAIL, MEMBERSHIP_NAME, PAID_AMOUNT, METHOD_ID) VALUES
	(SYSDATE,EMAIL_,MEMBERSHIP_NAME_, PAID_AMOUNT, NEW_METHOD_ID);
	INSERT INTO PROFILE(NICKNAME, EMAIL, PARENTAL_CONTROL) VALUES
	(NICKNAME_, EMAIL_, PARENTAL_CONTROL_);
	COMMIT;
EXCEPTION
	WHEN OTHERS THEN
		ROLLBACK;
END;
/
--Allows to delete a playlist's content and the playlist itself after that
CREATE OR REPLACE PROCEDURE REMOVE_PLAYLIST(PLAYLIST_NAME_ VARCHAR, NICKNAME_ VARCHAR)
IS
BEGIN
	DELETE FROM CONTAIN WHERE PLAYLIST_NAME=PLAYLIST_NAME_ AND NICKNAME=NICKNAME_;
	DELETE FROM PLAYLIST WHERE PLAYLIST_NAME= PLAYLIST_NAME_ AND NICKNAME=NICKNAME_;
	COMMIT;
END;
/
--Allows to add a content to a playlist and at the same time it checks that the calling profile has access to the content(it could be restricted)
CREATE OR REPLACE PROCEDURE ADD_CONTENT_TO_PLAYLIST(NICKNAME_ VARCHAR, PLAYLIST_NAME_ VARCHAR, TITLE_ VARCHAR, RELEASE_DATE_ DATE)
IS
	RATING_VAR PROFILE.PARENTAL_CONTROL%TYPE;
	RATING_CONTENT CONTENT.RATED_R%TYPE; 
	NOT_ALLOWED EXCEPTION;
BEGIN
	SELECT PARENTAL_CONTROL INTO RATING_VAR FROM PROFILE
	WHERE NICKNAME_= NICKNAME;
	IF RATING_VAR='1' THEN
		SELECT RATED_R INTO RATING_CONTENT FROM CONTENT
		WHERE TITLE_=TITLE AND RELEASE_DATE_=RELEASE_DATE;
		IF RATING_CONTENT='1' THEN
			RAISE NOT_ALLOWED;
		END IF;
	END IF;
	INSERT INTO CONTAIN(PLAYLIST_NAME,NICKNAME,TITLE,RELEASE_DATE) VALUES
	(PLAYLIST_NAME_,NICKNAME_,TITLE_,RELEASE_DATE_);
	COMMIT;
	EXCEPTION
	WHEN NOT_ALLOWED THEN
		RAISE_APPLICATION_ERROR(-20003,'ACCESS TO RESTRICTED CONTENT');
END;
/
--It allows to correctly delete a content from a playlist of a profile
CREATE OR REPLACE PROCEDURE DELETE_CONTENT_FROM_PLAYLIST(NICKNAME_ VARCHAR,PLAYLIST_NAME_ VARCHAR,TITLE_ VARCHAR,RELEASE_DATE_ DATE)
IS
	COUNTER CONTAIN%ROWTYPE;
BEGIN
	SELECT * INTO COUNTER FROM CONTAIN  WHERE NICKNAME = NICKNAME_ AND PLAYLIST_NAME = PLAYLIST_NAME_ AND TITLE = TITLE_ AND RELEASE_DATE = RELEASE_DATE_;
	DELETE FROM CONTAIN WHERE NICKNAME = NICKNAME_ AND PLAYLIST_NAME = PLAYLIST_NAME_ AND TITLE = TITLE_ AND RELEASE_DATE = RELEASE_DATE_;
	COMMIT;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20004,'NO CONTENT FOUND');
END;
/
--It allows a profile to add a review to a content only if he is not content-restricted
CREATE OR REPLACE PROCEDURE ADD_REVIEW(TITLE_ VARCHAR, RELEASE_DATE_ DATE, NICKNAME_ VARCHAR, SCORE_ NUMBER)
IS
	FORBIDDEN CONTENT.RATED_R%TYPE;
	PC PROFILE.PARENTAL_CONTROL%TYPE;
	RATED_R_ EXCEPTION;
BEGIN
	SELECT RATED_R INTO FORBIDDEN FROM CONTENT WHERE TITLE=TITLE_ AND RELEASE_DATE=RELEASE_DATE_;
	IF FORBIDDEN = '1' THEN
		SELECT PARENTAL_CONTROL INTO PC FROM PROFILE WHERE NICKNAME = NICKNAME_;
		IF PC ='1' THEN
			RAISE RATED_R_;
		END IF;
	END IF;
	INSERT INTO REVIEW(SCORE, TITLE, RELEASE_DATE, NICKNAME, REVIEW_DATE) VALUES
	(SCORE_, TITLE_, RELEASE_DATE_, NICKNAME_, SYSDATE);
	COMMIT;
	EXCEPTION
		WHEN RATED_R_ THEN
			RAISE_APPLICATION_ERROR(-20018,'THE SERVICE_USER CANNOT VISUALIZE THE CONTENT');
END;
/
--It allows to change subscription, and to register a payment with the selected payment method
CREATE OR REPLACE PROCEDURE RENEW_SUBSCRIPTION(EMAIL_ VARCHAR, MEMBERSHIP_NAME_ VARCHAR, CARD_NUMBER_ CHAR, PAYPAL_EMAIL_ VARCHAR)
IS 
	COUNTER NUMBER;
	DISCOUNT_AMOUNT NUMBER;
	EXTRACTED_ID NUMBER;
	NO_METHOD EXCEPTION;
BEGIN
	--Payment method selection
	IF CARD_NUMBER_ IS NULL THEN
		IF PAYPAL_EMAIL_ IS NULL THEN
			RAISE NO_METHOD;
		ELSE
			SELECT METHOD_ID INTO EXTRACTED_ID FROM PAYPAL WHERE EMAIL_PAYPAL= PAYPAL_EMAIL_;
		END IF;
	ELSE
		SELECT METHOD_ID INTO EXTRACTED_ID FROM CREDIT_CARD WHERE CARD_NUMBER= CARD_NUMBER_;
	END IF;
	--Verify eligibility and award discount
	SELECT COUNT(*) INTO COUNTER FROM SUBSCRIPTION WHERE EMAIL = EMAIL_ AND MEMBERSHIP_NAME = MEMBERSHIP_NAME_;
	SELECT PRICE INTO DISCOUNT_AMOUNT FROM MEMBERSHIP WHERE MEMBERSHIP_NAME = MEMBERSHIP_NAME_;
	IF COUNTER>2 AND COUNTER<6 THEN --Checking eligibility
		SELECT DISCOUNT_AMOUNT-(DISCOUNT_AMOUNT*20)/100 INTO DISCOUNT_AMOUNT FROM DUAL;
	ELSIF COUNTER>5 THEN
		SELECT DISCOUNT_AMOUNT-(DISCOUNT_AMOUNT*30)/100 INTO DISCOUNT_AMOUNT FROM DUAL;
	END IF;
	INSERT INTO SUBSCRIPTION(EMAIL, MEMBERSHIP_NAME, SUBSCRIPTION_DATE, PAID_AMOUNT , METHOD_ID) VALUES
	(EMAIL_, MEMBERSHIP_NAME_, SYSDATE, DISCOUNT_AMOUNT, EXTRACTED_ID);
	COMMIT;
	EXCEPTION
		WHEN NO_METHOD THEN
			RAISE_APPLICATION_ERROR(-20005,'NO PAYMENT METHOD INSERTED');
END;
/
--It allows to add a payment method if it doesn't exist yet or the card has expired
CREATE OR REPLACE PROCEDURE ADD_PAYMENT_METHOD(EMAIL_ VARCHAR, CARD_NUMBER_ CHAR,EXPIRATION_DATE_ DATE,HOLDER_NAME_ VARCHAR,HOLDER_SURNAME_ VARCHAR,PAYPAL_EMAIL_ VARCHAR)
IS
	NEW_METHOD_ID NUMBER;
	EXPIRED EXCEPTION;
BEGIN
	SELECT seq_method_id.NEXTVAL INTO NEW_METHOD_ID FROM DUAL;
	INSERT INTO PAYMENT_METHOD(METHOD_ID, EMAIL) VALUES 
	(NEW_METHOD_ID, EMAIL_);
	IF PAYPAL_EMAIL_ IS NULL THEN
		IF EXPIRATION_DATE_ < SYSDATE THEN
			RAISE EXPIRED;
		END IF;
		INSERT INTO CREDIT_CARD(CARD_NUMBER, EXPIRATION_DATE, HOLDER_NAME, HOLDER_SURNAME,  METHOD_ID) VALUES 
		(CARD_NUMBER_,EXPIRATION_DATE_,HOLDER_NAME_,HOLDER_SURNAME_,NEW_METHOD_ID);
	ELSE
		INSERT INTO PAYPAL(EMAIL_PAYPAL,METHOD_ID) VALUES
		(PAYPAL_EMAIL_,NEW_METHOD_ID);
	END IF;
	COMMIT;
	EXCEPTION
	WHEN EXPIRED THEN
		RAISE_APPLICATION_ERROR(-20006,'CARD ALREADY EXPIRED');
	WHEN OTHERS THEN
		ROLLBACK;
END;
/
--It allows an user to remove a device
CREATE OR REPLACE PROCEDURE REMOVE_DEVICE(EMAIL_ VARCHAR, MAC_ADDRESS_ CHAR)
IS 
	DEV CONNECTED_DEVICES%ROWTYPE;
	NO_DEVICE EXCEPTION;
BEGIN
	SELECT * INTO DEV FROM CONNECTED_DEVICES WHERE  EMAIL = EMAIL_ AND MAC_ADDRESS = MAC_ADDRESS_;--Potrebbe causare NO_DATA_FOUND
	DELETE FROM CONNECTED_DEVICES WHERE EMAIL = EMAIL_ AND MAC_ADDRESS= MAC_ADDRESS_;
	COMMIT;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20007,'NO MATCHING DEVICE FOUND');
END;
/
--It allows to an employee to correctly add a content, that is a movie or a tv series
CREATE OR REPLACE PROCEDURE ADD_CONTENT(TITLE_ VARCHAR, RELEASE_DATE_ DATE, GENRE VARCHAR, RATED_R_ CHAR, ARTIST_ID_ NUMBER, CAREER_START_DATE_ DATE, ROLE_ VARCHAR, NAME_ VARCHAR, SURNAME_ VARCHAR, SEX_ CHAR, MOVIE_DURATION_ NUMBER, EPISODE_DURATION_ NUMBER)
IS
	COUNTER NUMBER;
	NEW_ARTIST_ID NUMBER;
BEGIN
	IF ARTIST_ID_ IS NULL THEN
	--Add new content.
		SELECT seq_artist_id.NEXTVAL INTO NEW_ARTIST_ID FROM DUAL;
		INSERT INTO CONTENT(TITLE, RELEASE_DATE, GENRE, RATED_R) VALUES
		(TITLE_, RELEASE_DATE_, GENRE, RATED_R_);
		INSERT INTO ARTIST(ARTIST_ID, CAREER_START_DATE, NAME, SURNAME, SEX) VALUES
		(NEW_ARTIST_ID, CAREER_START_DATE_, NAME_, SURNAME_, SEX_);
		INSERT INTO PARTICIPATES(TITLE, RELEASE_DATE, ARTIST_ID) VALUES
		(TITLE_, RELEASE_DATE_, NEW_ARTIST_ID);
		INSERT INTO ROLES(ROLE,TITLE,RELEASE_DATE,ARTIST_ID) VALUES
		(ROLE_,TITLE_,RELEASE_DATE_,NEW_ARTIST_ID);
	ELSE --Add a new content and an already existing artist.
		SELECT COUNT(*) INTO COUNTER FROM ARTIST WHERE ARTIST_ID = ARTIST_ID_;--Could cause NO_DATA_FOUND
		INSERT INTO CONTENT(TITLE, RELEASE_DATE, GENRE, RATED_R) VALUES
		(TITLE_, RELEASE_DATE_, GENRE, RATED_R_);
		INSERT INTO PARTICIPATES(TITLE, RELEASE_DATE, ARTIST_ID) VALUES
		(TITLE_, RELEASE_DATE_, ARTIST_ID_);
		INSERT INTO ROLES(ROLE,TITLE,RELEASE_DATE,ARTIST_ID) VALUES
		(ROLE_,TITLE_,RELEASE_DATE_,ARTIST_ID_);
	END IF;
	IF MOVIE_DURATION_ IS NULL THEN
		INSERT INTO SERIES(TITLE, RELEASE_DATE, SEASON_NUM) VALUES
		(TITLE_, RELEASE_DATE_, 1);
		INSERT INTO SEASON(SEASON_NUM, RELEASE_DATE, TITLE, EPISODES_NUM) VALUES
		(1, RELEASE_DATE_, TITLE_, 1);
		INSERT INTO EPISODE(SEASON_NUM, TITLE,  RELEASE_DATE, EPISODE_NUM, EPISODE_DURATION) VALUES
		(1, TITLE_, RELEASE_DATE_, 1, EPISODE_DURATION_);
	ELSE 
		INSERT INTO MOVIE(TITLE, RELEASE_DATE, MOVIE_DURATION) VALUES 
		(TITLE_, RELEASE_DATE_, MOVIE_DURATION_);
	END IF;
	COMMIT;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20008,'ARTIST_ID NOT FOUND');
	WHEN OTHERS THEN
		ROLLBACK;
END;
/
--It allows an employee to add an artist and to associate it to a content via the relationship "participates".
--Furthermore, it establishes the artist's role for a determined content
CREATE OR REPLACE PROCEDURE ADD_PARTICIPANT(NAME_ VARCHAR, SURNAME_ VARCHAR, SEX_ CHAR, CAREER_START_DATE_ DATE, TITLE_ VARCHAR, RELEASE_DATE_ DATE, ROLE_ VARCHAR, ARTIST_ID_ NUMBER)
IS
	COUNTER NUMBER;
	NEW_ARTIST_ID NUMBER;
BEGIN
	IF ARTIST_ID_ IS NULL THEN
		--Artist not existing
		SELECT seq_artist_id.NEXTVAL INTO NEW_ARTIST_ID FROM DUAL;
		INSERT INTO ARTIST(ARTIST_ID, CAREER_START_DATE, NAME, SURNAME, SEX) VALUES
		(NEW_ARTIST_ID, CAREER_START_DATE_, NAME_, SURNAME_, SEX_);
		INSERT INTO PARTICIPATES(TITLE, RELEASE_DATE, ARTIST_ID) VALUES
		(TITLE_, RELEASE_DATE_, NEW_ARTIST_ID);
		INSERT INTO ROLES(ROLE,TITLE,RELEASE_DATE,ARTIST_ID) VALUES
		(ROLE_,TITLE_,RELEASE_DATE_,NEW_ARTIST_ID);
	ELSE
		--Artist already existing
		SELECT COUNT(*) INTO COUNTER FROM ARTIST WHERE ARTIST_ID = ARTIST_ID_;--Could cause NO_DATA_FOUND
		INSERT INTO PARTICIPATES(TITLE, RELEASE_DATE, ARTIST_ID) VALUES
		(TITLE_, RELEASE_DATE_, ARTIST_ID_);
		INSERT INTO ROLES(ROLE,TITLE,RELEASE_DATE,ARTIST_ID) VALUES
		(ROLE_,TITLE_,RELEASE_DATE_,ARTIST_ID_);
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RAISE_APPLICATION_ERROR(-20061,'ARTIST_ID NOT FOUND');
	WHEN OTHERS THEN
		ROLLBACK;
END;
/