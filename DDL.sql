DROP TABLE SERVICE_USER cascade constraint;
DROP TABLE FRIEND_OF cascade constraint;
DROP TABLE MEMBERSHIP cascade constraint;
DROP TABLE SUBSCRIPTION cascade constraint;
DROP TABLE PROFILE cascade constraint;
DROP TABLE CONNECTED_DEVICES cascade constraint;
DROP TABLE PAYMENT_METHOD cascade constraint;
DROP TABLE CREDIT_CARD cascade constraint;
DROP TABLE PAYPAL cascade constraint;
DROP TABLE ARTIST cascade constraint;
DROP TABLE CONTENT cascade constraint;
DROP TABLE REVIEW cascade constraint;
DROP TABLE PLAYLIST cascade constraint;
DROP TABLE CONTAIN cascade constraint;
DROP TABLE PARTICIPATES cascade constraint;
DROP TABLE ROLES cascade constraint;
DROP TABLE MOVIE cascade constraint;
DROP TABLE SERIES cascade constraint;
DROP TABLE SEASON cascade constraint;
DROP TABLE EPISODE cascade constraint;

CREATE TABLE SERVICE_USER(
EMAIL VARCHAR(50),
CONSTRAINT PK_SERVICE_USER PRIMARY KEY(EMAIL)
);

CREATE TABLE PAYMENT_METHOD(
METHOD_ID NUMBER(8,0),
EMAIL VARCHAR(50) NOT NULL,
CONSTRAINT PK_PAYMENT PRIMARY KEY(METHOD_ID),
CONSTRAINT FK_PAYMENT_METHOD FOREIGN KEY(EMAIL) REFERENCES SERVICE_USER(EMAIL) ON DELETE CASCADE
);

CREATE TABLE FRIEND_OF(
EMAIL VARCHAR(50),
FRIEND_EMAIL VARCHAR(50),
CONSTRAINT CHECK_EMAIL CHECK(EMAIL <> FRIEND_EMAIL),
CONSTRAINT PK_FRIEND_OF PRIMARY KEY(EMAIL, FRIEND_EMAIL),
CONSTRAINT FK1_FRIEND_OF FOREIGN KEY(EMAIL) REFERENCES SERVICE_USER(EMAIL) ON DELETE CASCADE,
CONSTRAINT FK2_FRIEND_OF FOREIGN KEY(FRIEND_EMAIL) REFERENCES SERVICE_USER(EMAIL) ON DELETE CASCADE
);

CREATE TABLE MEMBERSHIP(
MEMBERSHIP_NAME VARCHAR(30),
PRICE NUMBER(4,2) NOT NULL,
MONTHS_DURATION NUMBER(2,0) NOT NULL,
CONSTRAINT PK_MEMBERSHIP PRIMARY KEY(MEMBERSHIP_NAME)
);

CREATE TABLE SUBSCRIPTION(
SUBSCRIPTION_DATE DATE,
EMAIL VARCHAR(50),
MEMBERSHIP_NAME VARCHAR(30) NOT NULL,
PAID_AMOUNT NUMBER(4,2) NOT NULL,
METHOD_ID NUMBER(8,0) NOT NULL,
CONSTRAINT PK_SUBSCRIPTION PRIMARY KEY(SUBSCRIPTION_DATE,EMAIL),
CONSTRAINT FK1_MAKES FOREIGN KEY(EMAIL) REFERENCES SERVICE_USER(EMAIL) ON DELETE CASCADE,
CONSTRAINT FK2_MAKES FOREIGN KEY(MEMBERSHIP_NAME) REFERENCES MEMBERSHIP(MEMBERSHIP_NAME) ON DELETE CASCADE,
CONSTRAINT FK3_MAKES FOREIGN KEY(METHOD_ID) REFERENCES PAYMENT_METHOD(METHOD_ID) ON DELETE CASCADE
);

CREATE TABLE PROFILE(
NICKNAME VARCHAR(20),
EMAIL VARCHAR(50) NOT NULL,
PARENTAL_CONTROL CHAR(1) NOT NULL,
CONSTRAINT CHECK_PARENTAL_CONTROL CHECK(PARENTAL_CONTROL IN ('1','0')),
CONSTRAINT PK_PROFILE PRIMARY KEY(NICKNAME),
CONSTRAINT FK_PROFILE FOREIGN KEY(EMAIL) REFERENCES SERVICE_USER(EMAIL) ON DELETE CASCADE
);

CREATE TABLE CONNECTED_DEVICES(
MAC_ADDRESS CHAR(12),
EMAIL VARCHAR(50) NOT NULL,
CONSTRAINT CHECK_MACADDRESS_LENGHT CHECK(LENGTH( LTRIM( RTRIM(MAC_ADDRESS) ) ) = 12),
CONSTRAINT PK_CONNECTED_DEVICES PRIMARY KEY(MAC_ADDRESS, EMAIL),
CONSTRAINT FK1_CONNECTED_DEVICES FOREIGN KEY (EMAIL) REFERENCES SERVICE_USER(EMAIL) ON DELETE CASCADE
);

CREATE TABLE CREDIT_CARD(
METHOD_ID NUMBER(8,0),
CARD_NUMBER CHAR(16) NOT NULL UNIQUE,
EXPIRATION_DATE DATE NOT NULL,
HOLDER_NAME VARCHAR(20) NOT NULL,
HOLDER_SURNAME VARCHAR(20) NOT NULL,
CONSTRAINT CHECK_CARD_NUMBER_LENGHT CHECK(LENGTH( LTRIM( RTRIM(CARD_NUMBER) ) ) = 16),
CONSTRAINT PK_CREDIT_CARD PRIMARY KEY(METHOD_ID),
CONSTRAINT FK_CREDIT_CARD FOREIGN KEY(METHOD_ID) REFERENCES PAYMENT_METHOD(METHOD_ID) ON DELETE CASCADE
);

CREATE TABLE PAYPAL(
METHOD_ID NUMBER(8,0),
EMAIL_PAYPAL VARCHAR(50) NOT NULL UNIQUE,
CONSTRAINT PK_PAYPAL PRIMARY KEY(METHOD_ID),
CONSTRAINT FK_PAYPAL FOREIGN KEY(METHOD_ID) REFERENCES PAYMENT_METHOD(METHOD_ID) ON DELETE CASCADE
);

CREATE TABLE ARTIST(
ARTIST_ID NUMBER(12,0),
NAME VARCHAR(25) NOT NULL,
SURNAME VARCHAR(25) NOT NULL,
CAREER_START_DATE DATE NOT NULL,
SEX CHAR(1) NOT NULL,
CONSTRAINT CHECK_ARTIST_SEX CHECK(SEX IN ('M','F')),
CONSTRAINT PK_ARTIST PRIMARY KEY(ARTIST_ID)
);

CREATE TABLE CONTENT(
TITLE VARCHAR(50),
RELEASE_DATE DATE,
GENRE VARCHAR(20) NOT NULL,
RATED_R CHAR(1) NOT NULL,
CONSTRAINT CHECK_RATED_R CHECK(RATED_R IN ('1','0')),
CONSTRAINT CHECK_GENRE CHECK(GENRE IN('DETECTIVE','THRILLER','HORROR','COMEDY','ACTION','FANTASY','ANIMATION','GANGSTER','DRAMA')),
CONSTRAINT PK_CONTENT PRIMARY KEY(TITLE,RELEASE_DATE)
);

CREATE TABLE REVIEW(
TITLE VARCHAR(50),
RELEASE_DATE DATE,
NICKNAME VARCHAR(20),
SCORE NUMBER(1,0) NOT NULL,
REVIEW_DATE DATE NOT NULL,
CONSTRAINT PK_REVIEW PRIMARY KEY(TITLE, RELEASE_DATE, NICKNAME),
CONSTRAINT FK1_REVIEW FOREIGN KEY(TITLE, RELEASE_DATE) REFERENCES CONTENT(TITLE, RELEASE_DATE) ON DELETE CASCADE,
CONSTRAINT FK2_REVIEW FOREIGN KEY(NICKNAME) REFERENCES PROFILE(NICKNAME) ON DELETE CASCADE,
CONSTRAINT CHECK_SCORE CHECK(SCORE BETWEEN 1 AND 5)
);

CREATE TABLE PLAYLIST(
PLAYLIST_NAME VARCHAR(20),
NICKNAME VARCHAR(20),
CREATION_DATE DATE NOT NULL,
CONSTRAINT PK_PLAYLIST PRIMARY KEY(PLAYLIST_NAME, NICKNAME),
CONSTRAINT FK_PLAYLIST FOREIGN KEY(NICKNAME) REFERENCES PROFILE(NICKNAME) ON DELETE CASCADE
);

CREATE TABLE CONTAIN(
PLAYLIST_NAME VARCHAR(20),
NICKNAME VARCHAR(20),
TITLE VARCHAR(50),
RELEASE_DATE DATE,
CONSTRAINT PK_CONTAIN PRIMARY KEY(PLAYLIST_NAME, NICKNAME, TITLE, RELEASE_DATE),
CONSTRAINT FK1_CONTAIN FOREIGN KEY(PLAYLIST_NAME, NICKNAME) REFERENCES PLAYLIST(PLAYLIST_NAME, NICKNAME) ON DELETE CASCADE,
CONSTRAINT FK2_CONTAIN FOREIGN KEY(TITLE, RELEASE_DATE) REFERENCES CONTENT(TITLE, RELEASE_DATE) ON DELETE CASCADE
);

CREATE TABLE PARTICIPATES(
TITLE VARCHAR(30),
RELEASE_DATE DATE,
ARTIST_ID NUMBER(12,0),
CONSTRAINT PK_PARTICIPATES PRIMARY KEY(TITLE, ARTIST_ID, RELEASE_DATE),
CONSTRAINT FK1_PARTICIPATES FOREIGN KEY(TITLE, RELEASE_DATE) REFERENCES CONTENT(TITLE, RELEASE_DATE) ON DELETE CASCADE,
CONSTRAINT FK2_PARTICIPATES FOREIGN KEY(ARTIST_ID) REFERENCES ARTIST(ARTIST_ID) ON DELETE CASCADE
);

CREATE TABLE ROLES(
ROLE VARCHAR(30),
TITLE VARCHAR(50),
RELEASE_DATE DATE,
ARTIST_ID NUMBER(12,0),
CONSTRAINT PK_ROLES PRIMARY KEY(ROLE, TITLE, RELEASE_DATE, ARTIST_ID),
CONSTRAINT FK1_ROLES FOREIGN KEY(TITLE, RELEASE_DATE, ARTIST_ID) REFERENCES PARTICIPATES(TITLE, RELEASE_DATE, ARTIST_ID) ON DELETE CASCADE
);

CREATE TABLE MOVIE(
TITLE VARCHAR(50),
RELEASE_DATE DATE,
MOVIE_DURATION NUMBER(5,0) NOT NULL,
CONSTRAINT PK_MOVIE PRIMARY KEY(TITLE, RELEASE_DATE),
CONSTRAINT FK1_MOVIE FOREIGN KEY(TITLE, RELEASE_DATE) REFERENCES CONTENT(TITLE, RELEASE_DATE) ON DELETE CASCADE
);

CREATE TABLE SERIES(
TITLE VARCHAR(50),
RELEASE_DATE DATE,
SEASON_NUM NUMBER(2,0) NOT NULL,
CONSTRAINT PK_SERIES PRIMARY KEY(TITLE, RELEASE_DATE),
CONSTRAINT FK1_SERIES FOREIGN KEY(TITLE, RELEASE_DATE) REFERENCES CONTENT(TITLE, RELEASE_DATE) ON DELETE CASCADE
);

CREATE TABLE SEASON(
SEASON_NUM NUMBER(2,0),
TITLE VARCHAR(50),
RELEASE_DATE DATE,
EPISODES_NUM NUMBER(2,0) NOT NULL,
CONSTRAINT PK_SEASON PRIMARY KEY(SEASON_NUM,TITLE, RELEASE_DATE),
CONSTRAINT FK1_SEASON FOREIGN KEY(TITLE, RELEASE_DATE) REFERENCES SERIES(TITLE, RELEASE_DATE) ON DELETE CASCADE
);

CREATE TABLE EPISODE(
SEASON_NUM NUMBER(2,0),
TITLE VARCHAR(50),
RELEASE_DATE DATE,
EPISODE_NUM NUMBER(2,0),
EPISODE_DURATION NUMBER(5,0) NOT NULL,
CONSTRAINT PK_EPISODE PRIMARY KEY(SEASON_NUM, TITLE, RELEASE_DATE, EPISODE_NUM),
CONSTRAINT FK1_EPISODE FOREIGN KEY(SEASON_NUM, TITLE, RELEASE_DATE) REFERENCES SEASON(SEASON_NUM, TITLE, RELEASE_DATE) ON DELETE CASCADE
);

-----------------------
--SEQUENCES--
-----------------------
DROP SEQUENCE seq_method_id;
DROP SEQUENCE seq_artist_id;

--Sequence used to generate payment methods IDs
CREATE SEQUENCE seq_method_id
    MINVALUE 0
    MAXVALUE 10000000
    START WITH 16
    INCREMENT BY 1
    CACHE 20;

--Sequence used to generate artists IDs
CREATE SEQUENCE seq_artist_id
    MINVALUE 0
    MAXVALUE 100000000000
    START WITH 16
    INCREMENT BY 1
    CACHE 20;
-----------------------
--VIEWS--
-----------------------
--VIEW for profiles without parental control 
CREATE OR REPLACE VIEW SHOW_ALL_CONTENTS AS
SELECT * FROM CONTENT;
/
--View for profiles with active parental control
CREATE OR REPLACE VIEW SHOW_ALLOWED_CONTENTS AS
SELECT * FROM CONTENT
WHERE RATED_R='0';
/
--View for available memberships
CREATE OR REPLACE VIEW SHOW_MEMBERSHIPS AS
SELECT * FROM MEMBERSHIP;
/